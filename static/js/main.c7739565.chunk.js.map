{"version":3,"sources":["theme/GlobalStyle.js","templates/MainTemplate.js","base/variables.js","utils/index.js","api/openaq.js","api/wikipedia.js","context/index.js","components/Datalist/Option/Option.js","components/Datalist/Datalist.js","components/Button/Button.js","components/Label/Label.js","components/Input/Input.js","components/SearchForm/SearchForm.js","components/ErrorMessage/ErrorMessage.js","components/Spinner/Spinner.js","templates/CitiesTemplate.js","components/List/ListItem/ListItem.js","components/CityList/CityItem/CityItem.js","components/List/List.js","components/CityList/CityList.js","views/Cities.js","views/Root.js","index.js"],"names":["GlobalStyle","createGlobalStyle","StyledMain","styled","main","MainTemplate","children","countries","abbrList","createQueryParams","params","Object","keys","map","k","join","defaultParams","limit","order_by","sort","parameter","date_from","date","year","getUTCFullYear","month","getUTCMonth","slice","day","getUTCDate","setDate","Date","fetchPollutionData","country","queryParams","axios","action","format","explaintext","redirects","prop","exintro","exsentences","fetchWikipediaData","titles","PageContext","React","createContext","Option","value","Datalist","props","key","defaultProps","StyledButton","button","Button","type","StyledLabel","label","Label","labelName","srOnly","className","StyledInput","input","Input","StyledForm","form","StyledFormGroup","div","SearchForm","role","useContext","doFetch","isLoading","onSubmit","e","preventDefault","target","querySelector","autoComplete","name","list","id","disabled","ErrorMessage","p","StyledSpinner","Spinner","aria-busy","CitiesTemplate","isError","ListItem","li","CityItem","title","description","List","ul","StyledList","CityList","cities","length","pageid","extract","removeDuplicates","items","arr","filter","item","index","array","findIndex","element","city","splice","getTitles","str","split","encodeURIComponent","getAbbr","string","toLowerCase","Cities","useState","data","setData","setIsLoading","setIsError","a","undefined","abbr","results","removedDuplicates","pages","query","values","useDataApi","Provider","Root","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c7739565.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyle = createGlobalStyle`\n  *, *::before, *::after {\n    box-sizing: border-box;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n\n  body {\n    font-family: -apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,\"Helvetica Neue\",Arial,\"Noto Sans\",sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\",\"Segoe UI Symbol\",\"Noto Color Emoji\";\n  }\n\n  .sr-only {\n    position: absolute;\n    width: 1px;\n    height: 1px;\n    padding: 0;\n    overflow: hidden;\n    clip: rect(0, 0, 0, 0);\n    white-space: nowrap;\n    border: 0;\n  }\n`;\n\nexport default GlobalStyle;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport GlobalStyle from 'theme/GlobalStyle';\n\nconst StyledMain = styled.main`\n  margin: 0 auto;\n  padding: 0 30px;\n  text-align: center;\n\n  @media (min-width: 576px) {\n    max-width: 600px;\n  }\n`;\n\nconst MainTemplate = ({ children }) => (\n  <StyledMain>\n    <h1>The most polluted cities</h1>\n    <p>Check 10 the most polluted cities in Poland, Germany, Spain or France.</p>\n    <GlobalStyle />\n    {children}\n  </StyledMain>\n);\n\nMainTemplate.propTypes = {\n  children: PropTypes.element.isRequired,\n};\n\nexport default MainTemplate;\n","export const wikipediaUrl = 'https://en.wikipedia.org/w/api.php?origin=*';\nexport const openaqUrl = 'https://api.openaq.org/v1';\n\nexport const countries = ['Poland', 'Germany', 'Spain', 'France'];\nexport const abbrList = ['PL', 'DE', 'ES', 'FR'];\n","export const createQueryParams = params =>\n  Object.keys(params)\n    .map(k => `${k}=${params[k]}`)\n    .join('&');\n","import axios from 'axios';\nimport { openaqUrl } from 'base/variables';\nimport { createQueryParams } from 'utils';\n\nconst setDate = date => {\n  const year = date.getUTCFullYear();\n  const month = `0${date.getUTCMonth() + 1}`.slice(-2);\n  const day = `0${date.getUTCDate()}`.slice(-2);\n\n  return `${year}-${month}-${day}`;\n};\n\nconst limit = 500;\nconst measurements = '/measurements';\n\nconst defaultParams = {\n  limit,\n  order_by: 'value',\n  sort: 'desc',\n  parameter: 'pm25',\n  date_from: setDate(new Date()),\n};\n\nconst fetchPollutionData = country => {\n  const queryParams = { ...defaultParams, country };\n  const params = createQueryParams(queryParams);\n\n  return axios(`${openaqUrl}${measurements}?${params}`);\n};\n\nexport default fetchPollutionData;\n","import axios from 'axios';\nimport { wikipediaUrl } from 'base/variables';\nimport { createQueryParams } from 'utils';\n\nconst defaultParams = {\n  action: 'query',\n  format: 'json',\n  explaintext: '',\n  redirects: 1,\n  prop: 'extracts',\n  exintro: '',\n  exsentences: 2,\n};\n\nconst fetchWikipediaData = titles => {\n  const queryParams = { ...defaultParams, titles };\n  const params = createQueryParams(queryParams);\n\n  return axios(`${wikipediaUrl}&${params}`);\n};\n\nexport default fetchWikipediaData;\n","import React from 'react';\n\nconst PageContext = React.createContext();\n\nexport default PageContext;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Option = ({ country }) => <option value={country} />;\n\nOption.propTypes = {\n  country: PropTypes.string.isRequired,\n};\n\nexport default Option;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Option from './Option/Option';\n\nconst Datalist = ({ countries, ...props }) => (\n  <datalist {...props}>\n    {countries.map(country => (\n      <Option key={country} country={country} />\n    ))}\n  </datalist>\n);\n\nDatalist.propTypes = {\n  countries: PropTypes.arrayOf(PropTypes.string),\n};\n\nDatalist.defaultProps = {\n  countries: [],\n};\n\nexport default Datalist;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst StyledButton = styled.button`\n  display: inline-block;\n  font-weight: 400;\n  color: #fff;\n  text-align: center;\n  vertical-align: middle;\n  user-select: none;\n  background-color: #007bff;\n  border: 1px solid #007bff;\n  padding: 0.375rem 0.75rem;\n  font-size: 1rem;\n  line-height: 1.5;\n  border-radius: 0.25rem;\n  transition: color 0.15s;\n\n  &:disabled {\n    opacity: 0.65;\n  }\n\n  &:hover {\n    cursor: pointer;\n  }\n`;\n\nconst Button = ({ type, ...props }) => <StyledButton type={type} {...props} />;\n\nButton.propTypes = {\n  type: PropTypes.string,\n};\n\nButton.defaultProps = {\n  type: 'button',\n};\n\nexport default Button;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst StyledLabel = styled.label`\n  width: 100%;\n  display: inline-block;\n`;\n\nconst Label = ({ children, labelName, srOnly }) => (\n  <StyledLabel>\n    {srOnly ? <span className=\"sr-only\">{labelName}</span> : <>{labelName}</>}\n    {children}\n  </StyledLabel>\n);\n\nLabel.propTypes = {\n  children: PropTypes.node.isRequired,\n  labelName: PropTypes.string.isRequired,\n  srOnly: PropTypes.bool,\n};\n\nLabel.defaultProps = {\n  srOnly: false,\n};\n\nexport default Label;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst StyledInput = styled.input`\n  display: block;\n  width: 100%;\n  height: calc(1.5em + 0.75rem + 2px);\n  padding: 0.375rem 0.75rem;\n  font-size: 1rem;\n  font-weight: 400;\n  line-height: 1.5;\n  color: #495057;\n  background-color: #fff;\n  background-clip: padding-box;\n  border: 1px solid #ced4da;\n  border-radius: 0.25rem;\n`;\n\nconst Input = ({ type, ...props }) => <StyledInput type={type} {...props} />;\n\nInput.propTypes = {\n  type: PropTypes.string,\n};\n\nInput.defaultProps = {\n  type: 'text',\n};\n\nexport default Input;\n","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { countries } from 'base/variables';\nimport Datalist from 'components/Datalist/Datalist';\nimport Button from 'components/Button/Button';\nimport Label from 'components/Label/Label';\nimport Input from 'components/Input/Input';\nimport PageContext from 'context';\n\nconst StyledForm = styled.form`\n  margin-top: 20px;\n  margin-bottom: 15px;\n  display: flex;\n  flex-wrap: wrap;\n  flex-direction: column;\n\n  @media (min-width: 400px) {\n    flex-direction: row;\n    justify-content: center;\n    align-items: flex-start;\n  }\n`;\n\nconst StyledFormGroup = styled.div`\n  position: relative;\n  flex: 0 0 70%;\n\n  @media (min-width: 400px) {\n    margin-right: 4px;\n  }\n`;\n\nconst SearchForm = ({ role }) => {\n  const { doFetch, isLoading } = useContext(PageContext);\n\n  return (\n    <StyledForm\n      role={role}\n      onSubmit={e => {\n        e.preventDefault();\n\n        const { value } = e.target.querySelector(\"input[name='country']\");\n\n        doFetch(value);\n      }}\n    >\n      <StyledFormGroup>\n        <Label srOnly labelName=\"Country name:\">\n          <Input autoComplete=\"off\" name=\"country\" list=\"countries\" />\n          <Datalist id=\"countries\" countries={countries} />\n        </Label>\n      </StyledFormGroup>\n      <Button type=\"submit\" disabled={isLoading}>\n        Search\n      </Button>\n    </StyledForm>\n  );\n};\n\nSearchForm.propTypes = {\n  role: PropTypes.string,\n};\n\nSearchForm.defaultProps = {\n  role: '',\n};\n\nexport default SearchForm;\n","import styled from 'styled-components';\n\nconst ErrorMessage = styled.p`\n  width: 100%;\n  height: 18px;\n  font-weight: 700;\n  color: red;\n`;\n\nexport default ErrorMessage;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst StyledSpinner = styled.div`\n  display: inline-block;\n  width: 2rem;\n  height: 2rem;\n  vertical-align: text-bottom;\n  border: 0.25em solid currentColor;\n  border-right-color: transparent;\n  border-radius: 50%;\n  animation: spinner-border 0.75s linear infinite;\n\n  @keyframes spinner-border {\n    to {\n      transform: rotate(360deg);\n    }\n  }\n`;\n\nconst Spinner = () => (\n  <StyledSpinner aria-busy=\"true\" role=\"progressbar\">\n    <span className=\"sr-only\">Loading content...</span>\n  </StyledSpinner>\n);\n\nexport default Spinner;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport SearchForm from 'components/SearchForm/SearchForm';\nimport ErrorMessage from 'components/ErrorMessage/ErrorMessage';\nimport Spinner from 'components/Spinner/Spinner';\n\nconst CitiesTemplate = ({ children, isError, isLoading }) => (\n  <>\n    <ErrorMessage>{isError}</ErrorMessage>\n    <SearchForm role=\"search\" />\n    {isLoading && <Spinner />}\n    {children}\n  </>\n);\n\nexport default CitiesTemplate;\n\nCitiesTemplate.propTypes = {\n  children: PropTypes.element.isRequired,\n  isError: PropTypes.string,\n  isLoading: PropTypes.bool.isRequired,\n};\n\nCitiesTemplate.defaultProps = {\n  isError: '',\n};\n","import styled from 'styled-components';\n\nconst ListItem = styled.li`\n  margin-bottom: -1px;\n  padding: 0.75rem 1.25rem;\n  background-color: #fff;\n  border: 1px solid rgba(0, 0, 0, 0.125);\n\n  :first-child {\n    border-top-left-radius: 0.25rem;\n    border-top-right-radius: 0.25rem;\n  }\n\n  :last-child {\n    margin-bottom: 0;\n    border-bottom-right-radius: 0.25rem;\n    border-bottom-left-radius: 0.25rem;\n  }\n`;\n\nexport default ListItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ListItem from 'components/List/ListItem/ListItem';\n\nconst CityItem = ({ title, description }) => (\n  <ListItem>\n    <h2>{title}</h2>\n    <p>{description}</p>\n  </ListItem>\n);\n\nCityItem.propTypes = {\n  title: PropTypes.string,\n  description: PropTypes.string,\n};\n\nCityItem.defaultProps = {\n  title: '',\n  description: '',\n};\n\nexport default CityItem;\n","import styled from 'styled-components';\n\nconst List = styled.ul`\n  padding: 0;\n  list-style: none;\n`;\n\nexport default List;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport CityItem from 'components/CityList/CityItem/CityItem';\nimport List from 'components/List/List';\n\nconst StyledList = styled(List)`\n  margin-top: 40px;\n`;\n\nconst CityList = ({ cities }) => (\n  <>\n    {cities.length > 0 && (\n      <StyledList>\n        {cities.map(({ pageid, title, extract }) => (\n          <CityItem key={pageid} title={title} description={extract} />\n        ))}\n      </StyledList>\n    )}\n  </>\n);\n\nCityList.propTypes = {\n  cities: PropTypes.arrayOf(\n    PropTypes.shape({\n      pageid: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      extract: PropTypes.string.isRequired,\n    }),\n  ),\n};\n\nCityList.defaultProps = {\n  cities: [],\n};\n\nexport default CityList;\n","import React, { useState } from 'react';\nimport fetchPollutionData from 'api/openaq';\nimport fetchWikipediaData from 'api/wikipedia';\nimport PageContext from 'context';\nimport { countries, abbrList } from 'base/variables';\nimport CitiesTemplate from 'templates/CitiesTemplate';\nimport CityList from 'components/CityList/CityList';\n\nconst removeDuplicates = items => {\n  const arr = items.filter(\n    (item, index, array) => index === array.findIndex(element => element.city === item.city),\n  );\n\n  arr.splice(10);\n\n  return arr;\n};\n\nconst getTitles = items => {\n  const str = items.map(item => item.city.split('/')[0]);\n\n  return encodeURIComponent(str.join('|'));\n};\n\nconst getAbbr = string => {\n  const value = string.toLowerCase();\n  const index = countries.findIndex(country => country.toLowerCase() === value);\n\n  return abbrList[index];\n};\n\nconst useDataApi = () => {\n  const [data, setData] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState('');\n\n  const fetchData = async string => {\n    const abbr = getAbbr(string);\n\n    if (abbr !== undefined) {\n      setData([]);\n      setIsError('');\n      setIsLoading(true);\n\n      try {\n        const {\n          data: { results },\n        } = await fetchPollutionData(abbr);\n        const removedDuplicates = removeDuplicates(results);\n        const titles = getTitles(removedDuplicates);\n        const {\n          data: {\n            query: { pages },\n          },\n        } = await fetchWikipediaData(titles);\n\n        setIsLoading(false);\n        setData(Object.values(pages));\n      } catch (error) {\n        setIsError('Something went wrong, try again...');\n        setIsLoading(false);\n      }\n    } else {\n      setIsError('Wrong country provided');\n    }\n  };\n\n  return [{ data, isLoading, isError }, fetchData];\n};\n\nconst Cities = () => {\n  const [{ data, isLoading, isError }, doFetch] = useDataApi();\n\n  return (\n    <PageContext.Provider\n      value={{\n        doFetch,\n        isLoading,\n      }}\n    >\n      <CitiesTemplate isError={isError} isLoading={isLoading}>\n        <CityList cities={data} />\n      </CitiesTemplate>\n    </PageContext.Provider>\n  );\n};\n\nexport default Cities;\n","import React from 'react';\nimport 'normalize.css';\nimport MainTemplate from 'templates/MainTemplate';\nimport Cities from 'views/Cities';\n\nconst Root = () => (\n  <MainTemplate>\n    <Cities />\n  </MainTemplate>\n);\n\nexport default Root;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Root from 'views/Root';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Root />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}